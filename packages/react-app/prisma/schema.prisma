// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            Int      @id @default(autoincrement())
  userName      String   
  fid           Int?      
  totalEarned   BigInt   @default(0)
  walletAddress String   @unique
  smartAddress  String?
  tasks         Task[]
  // New relationships
  createdTasks  Task[]   @relation("TaskCreator")
  submissions   TaskSubmission[]
}

// New model for task creators and their tasks
model Task {
  id                Int      @id @default(autoincrement())
  title             String
  description       String
  blockChainId      String   @default("0")
  maxParticipants   Int
  currentParticipants Int    @default(0)
  baseReward        BigInt
  maxBonusReward    BigInt
  totalDeposited    BigInt
  status            TaskStatus @default(ACTIVE)
  aiCriteria        String   // JSON string of creator's AI rating criteria
  contactMethod     ContactMethod
  contactInfo       String   // Email or WhatsApp number
  createdAt         DateTime @default(now())
  expiresAt         DateTime?
  
  // New restriction fields
  restrictionsEnabled Boolean @default(false)
  ageRestriction     Boolean @default(false)
  minAge             Int?
  maxAge             Int?
  genderRestriction  Boolean @default(false)
  gender             String?  // 'M' or 'F'
  countryRestriction Boolean @default(false)
  countries          String?  // JSON array of country codes
  
  // Relationships
  creatorId         Int
  creator           User     @relation("TaskCreator", fields: [creatorId], references: [id])
  subtasks          TaskSubtask[]
  submissions       TaskSubmission[]
  
  // Legacy fields for backward compatibility
  subTaskId         Int?
  completed         Boolean  @default(false)
  claimed           Boolean  @default(false)
  feedback          String?
  reward            BigInt   @default(0)
  ipfsHash          String?
  aiRating          String?
  userId            Int?
  user              User?    @relation(fields: [userId], references: [id])
}

// New model for task subtasks with different types
model TaskSubtask {
  id          Int      @id @default(autoincrement())
  taskId      Int
  title       String
  description String?
  type        SubtaskType
  required    Boolean  @default(true)
  order       Int      // For ordering subtasks
  
  // For different subtask types
  options     String?  // JSON array for multiple choice
  placeholder String?  // For text inputs
  maxLength   Int?     // For text inputs
  fileTypes   String?  // JSON array of allowed file types
  
  // Relationships
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  responses   SubtaskResponse[]
}

// New model for user submissions to tasks
model TaskSubmission {
  id          Int      @id @default(autoincrement())
  taskId      Int
  userId      Int
  status      SubmissionStatus @default(PENDING)
  aiRating    Int?     // 1-10 rating from AI
  aiFeedback  String?  // AI's explanation of rating
  reward      BigInt   @default(0)
  submittedAt DateTime @default(now())
  reviewedAt  DateTime?
  
  // Relationships
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses   SubtaskResponse[]
}

// New model for individual subtask responses
model SubtaskResponse {
  id              Int      @id @default(autoincrement())
  submissionId    Int
  subtaskId       Int
  response        String   // JSON string of user's response
  fileUrl         String?  // IPFS or other file storage URL
  
  // Relationships
  submission      TaskSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  subtask         TaskSubtask    @relation(fields: [subtaskId], references: [id], onDelete: Cascade)
}

// Enums for the new models
enum TaskStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum ContactMethod {
  EMAIL
  WHATSAPP
  BOTH
}

enum SubtaskType {
  MULTIPLE_CHOICE
  TEXT_INPUT
  FILE_UPLOAD
  CHOICE_SELECTION
  RATING
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  REWARDED
}

// Legacy models for backward compatibility
model Taskers{
  id Int  @id @default(autoincrement())
  taskId  String
  taskersArray  String
}
